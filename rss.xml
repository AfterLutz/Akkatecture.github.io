<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Akkatecture]]></title><description><![CDATA[Site for the Akkatecture project.]]></description><link>https://akkatecture.github.io</link><image><url>https://akkatecture.github.io/logos/logo-512.png</url><title>Akkatecture</title><link>https://akkatecture.github.io</link></image><generator>Akkatecture</generator><lastBuildDate>Sun, 22 Apr 2018 06:30:36 GMT</lastBuildDate><atom:link href="https://akkatecture.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Aggregates]]></title><description><![CDATA[Initially before you can create a aggregate, you need to create its
identity and state. You can create your own implementation of   by…]]></description><link>https://akkatecture.github.io/aggregates</link><guid isPermaLink="false">https://akkatecture.github.io/aggregates</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Initially before you can create a aggregate, you need to create its
identity and state. You can create your own implementation of &lt;code class=&quot;language-text&quot;&gt;Identity&lt;/code&gt; by implementing the
&lt;code class=&quot;language-text&quot;&gt;IIdentity&lt;/code&gt; interface or you can use a base class &lt;code class=&quot;language-text&quot;&gt;Identity&amp;lt;&amp;gt;&lt;/code&gt; that
Akkatecture provides, like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestAggregateId&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TestAggregateId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TestAggregateId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Identity&amp;lt;&amp;gt;&lt;/code&gt; value object provides generic functionality to create and validate aggregate root IDs. Please read the documentation regarding the bundled Identity&amp;#x3C;&gt; type as it provides several useful features, e.g. several different schemes for ID generation, one that minimizes MSSQL database fragmentation.&lt;/p&gt;
&lt;p&gt;Additionally to create your aggregate state, which will be used for applying aggregate events to, you can create your own by inheriting from the base &lt;code class=&quot;language-text&quot;&gt;AggregateState&amp;lt;,,&amp;gt;&lt;/code&gt; class like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TestAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestAggregateId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Next, to create a new aggregate, simply inherit from &lt;code class=&quot;language-text&quot;&gt;AggregateRoot&amp;lt;,,&amp;gt;&lt;/code&gt; like this, making sure to pass test aggregate own type as the first generic argument and the identity as the second, and the state as the third. Make sure to pass down the aggregate identity to the base class, as this is required.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestAggregate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateRoot&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TestAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestAggregateId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TestAggregate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TestAggregateId&lt;/span&gt; aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Aggregates in Akkatecture exist as singletons in the actor system, and thus by design, only one aggregate root instance can be created or used per id at any given time. The situation of having two aggregate roots available with the same aggregateId means that you have two instances of the aggregate state in the actor system which leads to a data level split brain situation. Akkatecture makes it easy to avoid this with the use of &lt;code class=&quot;language-text&quot;&gt;AggregateManager&amp;lt;,,,,&amp;gt;&lt;/code&gt; which is essentially a message coordinater/dispatcher for the underlying aggregate.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Akka]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/akka</link><guid isPermaLink="false">https://akkatecture.github.io/akka</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Commands]]></title><description><![CDATA[Commands are the basic value objects, or models, that represent write operations that you can perform in your domain. As an example, one…]]></description><link>https://akkatecture.github.io/commands</link><guid isPermaLink="false">https://akkatecture.github.io/commands</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Commands are the basic value objects, or models, that represent write operations that you can perform in your domain.&lt;/p&gt;
&lt;p&gt;As an example, one might implement create this command for initiating a bank transfer from.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransferMoneyCommand&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; Amount &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; DestinationAccountId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UserUpdatePasswordCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Amount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DestinationAccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the Money class is merely a value object created to hold the password and do basic validation. Read the article regarding value objects for more information. Also, you don’t have to use the default Akkatecture &lt;code class=&quot;language-text&quot;&gt;Command&amp;lt;,&amp;gt;&lt;/code&gt; implementation, you can create your own, it merely have to implement the &lt;code class=&quot;language-text&quot;&gt;ICommand&amp;lt;,&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A command by itself doesn’t do anything and will be swollowed by the underlying actor as unprocessed. To make a command work, you need to implement at least command handler which is responsible for invoking the aggregate&apos;s command handler.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountAggregate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateRoot&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountAggregateId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AccountAggregate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AccountAggregateId&lt;/span&gt; aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TransferMoneyCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Execute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TransferMoneyCommand&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;State&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Balance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;//Domain Error, not enough money to send&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Id &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DestinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;//Domain Error, cant send money to yourself&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;token function&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MoneyTransferedEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DestinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token comment&quot;&gt;//tell akkas underlying actor that you handled the command&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;ensure-idempotency&quot;&gt;&lt;a href=&quot;#ensure-idempotency&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ensure Idempotency&lt;/h2&gt;
&lt;p&gt;Detecting duplicate operations can be hard, especially if you have a distributed application, or simply a web application. Consider the following simplified scenario.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user wants to send her money.&lt;/li&gt;
&lt;li&gt;The user fills in the &quot;send money form&quot;.&lt;/li&gt;
&lt;li&gt;As user is impatient, or by accident, the user submits the for twice.&lt;/li&gt;
&lt;li&gt;The first web request completes, is validated, and the money is sent. However, as the browser is waiting on the first web request, this result is ignored&lt;/li&gt;
&lt;li&gt;The second web request either transfers money again since there is enough balance, or  throws a domain error as there is no more balance left in the account.&lt;/li&gt;
&lt;li&gt;The user is presented with a error on the web page, or has accidently sent money twice when she only meant to send it once.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since Akkatectures design decision dictates that aggregate roots exist as a singleton, we can deal with idempotency at the aggregate level.&lt;/p&gt;
&lt;p&gt;We can redesign our command to look like this&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransferMoneyCommand&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; Amount &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; DestinationAccountId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UserUpdatePasswordCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ISourceId&lt;/span&gt; sourceId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sourceId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Amount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DestinationAccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Note the use of the other &lt;code class=&quot;language-text&quot;&gt;protected&lt;/code&gt; constructor of &lt;code class=&quot;language-text&quot;&gt;Command&amp;lt;,&amp;gt;&lt;/code&gt; that takes a &lt;code class=&quot;language-text&quot;&gt;ISourceId&lt;/code&gt; in addition to the aggregate root identity. This sourceId can be supplied from outside the aggregate boundary eg the API surface.
You can then use a circular buffer or &quot;list of processed&quot; commands within your aggregate root to reject previously seen commands.&lt;/p&gt;
&lt;h2 id=&quot;easier-isourceid-calculation&quot;&gt;&lt;a href=&quot;#easier-isourceid-calculation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Easier ISourceId calculation&lt;/h2&gt;
&lt;p&gt;Ensuring the correct calculation of the command &lt;code class=&quot;language-text&quot;&gt;ISourceId&lt;/code&gt; can be somewhat cumbersome, which is why Akkatecture provides another base command you can use, the &lt;code class=&quot;language-text&quot;&gt;DistinctCommand&amp;lt;,&amp;gt;&lt;/code&gt;. By using the &lt;code class=&quot;language-text&quot;&gt;DistinctCommand&amp;lt;,&amp;gt;&lt;/code&gt; you merely have to implement the &lt;code class=&quot;language-text&quot;&gt;GetSourceIdComponents()&lt;/code&gt; and providing the &lt;code class=&quot;language-text&quot;&gt;IEnumerable&amp;lt;byte[]&amp;gt;&lt;/code&gt; that makes the command unique. The bytes is used to create a deterministic GUID to be used as an ISourceId.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransferMoneyCommand&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DistinctCommand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AccountId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; Amount &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; DestinationAccountId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UserUpdatePasswordCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;ISourceId&lt;/span&gt; sourceId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Amount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DestinationAccountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; destinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; IEnumerable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetSourceIdComponents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Amount&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; DestinationAccountId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;GetBytes()&lt;/code&gt; merely returns the &lt;code class=&quot;language-text&quot;&gt;Encoding.UTF8.GetBytes(...)&lt;/code&gt; of the value object.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Events]]></title><description><![CDATA[In an event source system like Akkatecture, aggregate root data is stored stored in events. Please make sure to read the section on   for…]]></description><link>https://akkatecture.github.io/events</link><guid isPermaLink="false">https://akkatecture.github.io/events</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In an event source system like Akkatecture, aggregate root data is stored stored in events.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PingEvent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateEvent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TestAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestAggregateId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; Data &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PingEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          Data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Please make sure to read the section on &lt;code class=&quot;language-text&quot;&gt;value objects and events &amp;lt;value-objects&amp;gt;&lt;/code&gt; for some important notes on creating events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;emitting-events&quot;&gt;&lt;a href=&quot;#emitting-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emitting Events&lt;/h2&gt;
&lt;p&gt;In order to emit an event from an aggregate, call the &lt;code class=&quot;language-text&quot;&gt;protected&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;Emit(...)&lt;/code&gt; method which applies the event to the aggregate state and commits the event to its event source.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Fancy domain logic here that validates against aggregate state...&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Throw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DomainError&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;With&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ping data empty&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token function&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PingEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;applying-events&quot;&gt;&lt;a href=&quot;#applying-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Applying Events&lt;/h2&gt;
&lt;p&gt;Akkatecture has a rather opinionated way of approaching the application of events. Events that are emitting should only be applied to its own aggregate state. that makes it rather convienient to isolate the place where aggregate events get applied within the aggregate&apos;s boundaries. To register an aggregate event applyer method on the aggregate state, all you have to do is implement the &lt;code class=&quot;language-text&quot;&gt;IApply&amp;lt;&amp;gt;&lt;/code&gt; interface on your aggregate state.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestAggregate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateRoot&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TestAggregate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestAggregateId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        IApply&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;PingEvent&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; List&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Pings &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TestAggregate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TestAggregateId&lt;/span&gt; aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aggregateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PingEvent&lt;/span&gt; aggregateEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Pings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aggregateEvent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the above example of aggregate event application could be improved because it is not idempotent. Desgining your apply methods with idempotency in mind, will make for a resilient aggregate state. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;published-events&quot;&gt;&lt;a href=&quot;#published-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Published Events&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Subscribers]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/subscribers</link><guid isPermaLink="false">https://akkatecture.github.io/subscribers</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Configuration]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/configuration</link><guid isPermaLink="false">https://akkatecture.github.io/configuration</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Primitives]]></title><description><![CDATA[The basic core primitives of akkatecture are: Value Objects Identities Entities A Value Object is an immutable type that is distinguishable…]]></description><link>https://akkatecture.github.io/primitives</link><guid isPermaLink="false">https://akkatecture.github.io/primitives</guid><category><![CDATA[basic-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The basic core primitives of akkatecture are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#value-objects&quot;&gt;Value Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#identities&quot;&gt;Identities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#entities&quot;&gt;Entities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Value Object is an immutable type that is distinguishable only by the state of its properties. That is, unlike an Entity, which has a unique identifier and remains distinct even if its properties are otherwise identical, two Value Objects with the exact same properties can be considered equal. Two entities with the same identity are considered equal. Akkatecture uses these primitives all over the project and you are highly encouraged to use them as well so that your domain design is highly expressive.&lt;/p&gt;
&lt;h1 id=&quot;value-objects&quot;&gt;&lt;a href=&quot;#value-objects&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Value Objects&lt;/h1&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;SingleValueObject&amp;lt;&amp;gt;&lt;/code&gt; generic primitive provides you with the necessary class overrides you need to have, so that they can be compared on the basis of their collective state. If all of their component properties are equal to one another, then two Value Objects can be said to be equal. It works by scanning for the value objects public members and comparing the members from value object to value object. Feel free to derive from this class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountNumber&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SingleValueObject&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AccountNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//do some model validation, null checks etc.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;It is recommended to use &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; as the parameter name, if you intend to serialize value objects. With Akkatecture&apos;s built in serialization converters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;identities&quot;&gt;&lt;a href=&quot;#identities&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Identities&lt;/h1&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Identity&amp;lt;&amp;gt;&lt;/code&gt; value object provides generic functionality to create
and validate the IDs of e.g. aggregate roots. Its basically a wrapper
around a &lt;code class=&quot;language-text&quot;&gt;Guid&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The identity follow the form &lt;code class=&quot;language-text&quot;&gt;{class without &amp;quot;Id&amp;quot;}-{guid}&lt;/code&gt; e.g. &lt;code class=&quot;language-text&quot;&gt;account-c93fdb8c-5c9a-4134-bbcd-87c0644ca34f&lt;/code&gt; for the above &lt;code class=&quot;language-text&quot;&gt;AccountId&lt;/code&gt; example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The internal &lt;code class=&quot;language-text&quot;&gt;Guid&lt;/code&gt; can be generated using one of the following methods/properties. Note that you can access the &lt;code class=&quot;language-text&quot;&gt;Guid&lt;/code&gt; factories directly by accessing the static methods on the &lt;code class=&quot;language-text&quot;&gt;GuidFactories&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;New&lt;/code&gt;: Uses the standard &lt;code class=&quot;language-text&quot;&gt;Guid.NewGuid()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NewDeterministic(...)&lt;/code&gt;: Creates a name-based &lt;code class=&quot;language-text&quot;&gt;Guid&lt;/code&gt; using the algorithm from &lt;a href=&quot;https://www.ietf.org/rfc/rfc4122.txt&quot;&gt;RFC 4122 §4.3&lt;/a&gt;, which allows identities to be generated based on known data, e.g. an user e-mail, i.e., it always returns the same identity for the same arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NewComb()&lt;/code&gt;: Creates a sequential &lt;code class=&quot;language-text&quot;&gt;Guid&lt;/code&gt; that can be used to e.g. avoid database fragmentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt; can be tested to see if its a valid identity using the static &lt;code class=&quot;language-text&quot;&gt;bool IsValid(string)&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any validation errors can be gathered using the static &lt;code class=&quot;language-text&quot;&gt;IEnumerable&amp;lt;string&amp;gt; Validate(string)&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;   Its very important to name the constructor argument &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; as it is significant when the identity type is deserialized.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&apos;s some examples on we can use our newly created &lt;code class=&quot;language-text&quot;&gt;AccountId&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Uses the default Guid.NewGuid()&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; accountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;New&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Create a namespace, put this in a constant somewhere&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; emailNamespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;769077C6-F84D-46E3-AD2E-828A576AAAF3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Creates an identity with the value &quot;account-9181a444-af25-567e-a866-c263b6f6119a&quot;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//useful to use when you want to create Id&apos;s&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// deterministically from other real world &quot;identifiers&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; accountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewDeterministic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;emailNamespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test@example.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Creates a new identity every time, but an identity when used in e.g.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// database indexes, minimizes fragmentation&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; accountId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; AccountId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewComb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h1 id=&quot;entities&quot;&gt;&lt;a href=&quot;#entities&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Entities&lt;/h1&gt;
&lt;p&gt;An Entity is an object that has some intrinsic identity, apart from the rest of its state. Even if its properties are the same as another instance of the same type, it remains distinct because of its unique identity. The &lt;code class=&quot;language-text&quot;&gt;Entity&amp;lt;&amp;gt;&lt;/code&gt; In Akkatecture is itself a Value Object however it implements the &lt;code class=&quot;language-text&quot;&gt;IEntity&amp;lt;Identity&amp;gt;&lt;/code&gt; interface, which requires it to have a member called &lt;code class=&quot;language-text&quot;&gt;Id&lt;/code&gt;. Now you can see the relationship between &lt;code class=&quot;language-text&quot;&gt;Entity&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;SingleValueObject&amp;lt;&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;Identity&amp;lt;&amp;gt;&lt;/code&gt;. A sample Entity running onwards from the Account example above, could be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AccountId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountNumber&lt;/span&gt; AccountNumber &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AccountId&lt;/span&gt; entityId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountNumber&lt;/span&gt; accountNumber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entityId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//do some model validation, null checks etc.&lt;/span&gt;
      AccountNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; accountNumber&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;As you can see &lt;code class=&quot;language-text&quot;&gt;Account&lt;/code&gt; has an &lt;code class=&quot;language-text&quot;&gt;AccountId&lt;/code&gt; entity identifier, and is itself an value object because &lt;code class=&quot;language-text&quot;&gt;Entity&amp;lt;&amp;gt;&lt;/code&gt; inherits from &lt;code class=&quot;language-text&quot;&gt;SingleValueObject&amp;lt;&amp;gt;&lt;/code&gt;, and has a ValueObject member &lt;code class=&quot;language-text&quot;&gt;AccountNumber&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Snapshotting]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/snapshotting</link><guid isPermaLink="false">https://akkatecture.github.io/snapshotting</guid><category><![CDATA[advanced-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Clustering]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/clustering</link><guid isPermaLink="false">https://akkatecture.github.io/clustering</guid><category><![CDATA[advanced-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sagas]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/sagas</link><guid isPermaLink="false">https://akkatecture.github.io/sagas</guid><category><![CDATA[advanced-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Production Readiness]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/production-readiness</link><guid isPermaLink="false">https://akkatecture.github.io/production-readiness</guid><category><![CDATA[advanced-concepts]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Articles]]></title><description><![CDATA[Domain-Driven Design Domain-Driven Design Reference  by Eric Evans General CQRS+ES CQRS Journey by Microsoft  by Microsoft An In-Depth Look…]]></description><link>https://akkatecture.github.io/articles</link><guid isPermaLink="false">https://akkatecture.github.io/articles</guid><category><![CDATA[further-self-study]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;domain-driven-design&quot;&gt;&lt;a href=&quot;#domain-driven-design&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domain-Driven Design&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://domainlanguage.com/ddd/reference/&quot;&gt;Domain-Driven Design Reference&lt;/a&gt; by Eric Evans&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;general-cqrses&quot;&gt;&lt;a href=&quot;#general-cqrses&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;General CQRS+ES&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/jj554200.aspx&quot;&gt;CQRS Journey by Microsoft&lt;/a&gt; by Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sapiensworks.com/post/2015/09/01/In-Depth-CQRS&quot;&gt;An In-Depth Look At CQRS&lt;/a&gt; by Mike Mogosanu&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/&quot;&gt;CQRS, Task Based UIs, Event Sourcing agh!&lt;/a&gt; by Greg Young&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/&quot;&gt;Busting some CQRS myths&lt;/a&gt; by Jimmy Bogard&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lostechies.com/gabrielschenker/2015/04/12/cqrs-applied/&quot;&gt;CQRS applied&lt;/a&gt; by Gabriel Schenker&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;eventual-consistency&quot;&gt;&lt;a href=&quot;#eventual-consistency&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Eventual consistency&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sapiensworks.com/post/2015/08/26/How-To-Ensure-Idempotency&quot;&gt;How To Ensure Idempotency In An Eventual Consistent DDD/CQRS Application&lt;/a&gt; by Mike Mogosanu&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;other&quot;&gt;&lt;a href=&quot;#other&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md&quot;&gt;Microsoft REST Api Guidelines&lt;/a&gt; by Microsoft&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Tips and Tricks]]></title><description><![CDATA[Whenever creating an application that uses cqrs and   event sourcing there are several
things you need to keep in mind to make it easier and…]]></description><link>https://akkatecture.github.io/tips-and-tricks</link><guid isPermaLink="false">https://akkatecture.github.io/tips-and-tricks</guid><category><![CDATA[further-self-study]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Whenever creating an application that uses cqrs and   event sourcing there are several
things you need to keep in mind to make it easier and minimize the
potential bugs, and headaches.&lt;/p&gt;
&lt;h2 id=&quot;events&quot;&gt;&lt;a href=&quot;#events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Events&lt;/h2&gt;
&lt;p&gt;Make sure that when your aggregate events are JSON serialized, they
produce clean JSON as it makes it easier to work with and enable you to
easier deserialize the events in the future. Make sure that the events have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No type information&lt;/li&gt;
&lt;li&gt;No runtime information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&apos;s an example of good clean event JSON produced from a create user
event.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Username&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;PasswordHash&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1234567890ABCDEF&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;EMail&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;root@example.org&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Keep Aggregate Events As Slim As Possible&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A good rule of thumb is to minimize the amount of noisey data that can exist in the aggregate event. If your state event applying method uses all of the event member variables on invokation, then you have a good event. adding bloat and extra data to events waters down how true the events are. Events embody &apos;facts which happened&apos; in your domain. If you add unessacary &apos;facts&apos; that dont pertain to that event in your event model, then that event becomes less &apos;fact-y&apos;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Idempotent Apply Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your apply methods should be functional and idempotent, meaning the application of the same event over the state object multiple times should produce the same result as if it were applied only once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep Old Event Types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind, that you need to keep the event types in your code for as long as these events are in the event source, which in most cases are &lt;em&gt;forever&lt;/em&gt; as storage is cheap and information, i.e., your domain events, are expensive. Distinguish between old event types and broken event types with high scrutiny as these are the fundamental building blocks of your domain.&lt;/p&gt;
&lt;p&gt;However, you should still clean your code, have a look at how you can
&lt;code class=&quot;language-text&quot;&gt;upgrade and version your events &amp;lt;event-upgrade&amp;gt;&lt;/code&gt; for details on
how Akkatecture supports you in this.&lt;/p&gt;
&lt;h2 id=&quot;unit-testing&quot;&gt;&lt;a href=&quot;#unit-testing&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Unit test your aggregates and sagas in isolation from one another. By using black box style  testing you can follow this approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aggregate Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange - setup the aggregate actor, listen to the aggregate actors possible emitted events.&lt;/li&gt;
&lt;li&gt;Act - send the aggregate actor a command.&lt;/li&gt;
&lt;li&gt;Assert - check to see if the aggregate actor emits the domain event as desired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;strong&gt;Saga Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange - setup the saga actor, listen to the saga actors issued commands by mocking its actor reference to a test probe actor&lt;/li&gt;
&lt;li&gt;Act - send the saga actor a domain event.&lt;/li&gt;
&lt;li&gt;Assert - check to see if the saga actor tells the probe actor the desired command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will be most advantageous to learn akka.net&apos;s &lt;a href=&quot;http://getakka.net/articles/actors/testing-actor-systems.html&quot;&gt;test kit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;make-your-domain-expressive&quot;&gt;&lt;a href=&quot;#make-your-domain-expressive&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Make Your Domain Expressive&lt;/h2&gt;
&lt;p&gt;Your domain code is your business model codified. Make sure that you apply the principle of a ubiquitous language to your domain by being explicit but terse in your naming conventions, this leads to a far more enjoyable developer expirience for those who share the code base. With the fall in popularity of UML diagrams and other forms of non-code business domain models, code written in a ddd way is your business domain model.&lt;/p&gt;
&lt;h2 id=&quot;plan-for-uncertainty--inconsistency&quot;&gt;&lt;a href=&quot;#plan-for-uncertainty--inconsistency&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Plan For Uncertainty &amp;#x26; Inconsistency&lt;/h2&gt;
&lt;p&gt;Note about message guarantees, message based systems etc&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Videos]]></title><description><![CDATA[Below are some video resources that you can use to bootstrap your fundamental knowledge about the concepts that are seen throughout…]]></description><link>https://akkatecture.github.io/videos</link><guid isPermaLink="false">https://akkatecture.github.io/videos</guid><category><![CDATA[further-self-study]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Below are some video resources that you can use to bootstrap your fundamental knowledge about the concepts that are seen throughout Akkatecture.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-Model-everything-you-wanted-to-know-but-were-afraid-to-ask&quot;&gt;Fundamentals About Actor Systems&lt;/a&gt; by Hewitt Meijer and Szyperski&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=JHGkaShoyNs&quot;&gt;CQRS and Event Sourcing&lt;/a&gt; by Eric Evans&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9a1PqwFrMP0&amp;#x26;t=2042s&quot;&gt;An Introduction to CQRS and Event Sourcing Patterns&lt;/a&gt; by Mathew McLoughling&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ozelpjr9SXE&amp;#x26;t=2140s&quot;&gt;The Future of Distributed Programming in .NET&lt;/a&gt; by Aaron Stannard&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=STKCRSUsyP0&quot;&gt;The Many Meanings of Event-Driven Architecture&lt;/a&gt; by Martin Fowler&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/0C7J7hFv_pk&quot;&gt;The Future of Event-driven Microservices&lt;/a&gt; by Kenny Bastani&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/YPbGW3Fnmbc&quot;&gt;Using sagas to maintain data consistency in a microservice architecture&lt;/a&gt; by Chris Richardson
-&lt;a href=&quot;https://youtu.be/xDuwrtwYHu8&quot;&gt;Applying the Saga Pattern&lt;/a&gt; by Caitie McCaffrey&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Getting Started]]></title><description><![CDATA[Akkatecture is set of constructs and patterns written in C# ontop of akka.net. The main goal of Akkatecture is to allow developers who are…]]></description><link>https://akkatecture.github.io/getting-started</link><guid isPermaLink="false">https://akkatecture.github.io/getting-started</guid><category><![CDATA[getting-started]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Akkatecture is set of constructs and patterns written in C# ontop of akka.net. The main goal of Akkatecture is to allow developers who are using akka.net to model their business domain within the akka.net framework easily. Akkatecture is built on messaging &amp;#x26; event based mode of operation, making it highly reactive and scalable. Akkatecture focusses on messaging and domain driven design integration patterns between domain entities within an akka actor system to make developing distributed domain driven design applications easier.&lt;/p&gt;
&lt;p&gt;Akkatecture uses the actor model as the universal primitive of concurrent computation. This means that aggregates, sagas, and other domain concepts are modelled within the actor model. Invoking or interacting with the domain is done by having these actors either react through commands (sent from outside of the aggregate boundary), or through domain events, emitted from within the domain boundary, both of which are fundamentally messages. A strong case can be made for using the actor system as a basis for designing your distributed domain, because actors in actor systems embody 3 things fundamentally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Processing&lt;/strong&gt; - actors can do work when requested to, the requested work can be initiated by a message, typically in the form of a command or an event, the locality of this processing is done within the instantiation of an actor itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; - actors can store local internal state, in memory, and defer storing its state to persistence. This state is also thread safe from anything outside of the actors locality since actors process one message at a time and cannot be inspected by normal means.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt; - actors can communicate with each other using a pre-defined communication protocol. Typically addressed by using location transparent actor addresses. Actors communicate with message passing and that is the only way that the outside world can communicate with the actor system. Messages beign commands, or events.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The actor model in computer science is a mathematical model of concurrent computation that treats &quot;actors&quot; as the universal primitives of concurrent computation. In response to a message that it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify their own private state, but can only affect each other through messages (avoiding the need for any defining of critical sections, or wierd mutexs).&lt;/p&gt;
&lt;p&gt;Akka based systems have been used to drive hugely scalable and highly available systems (such as Netflix and The Guardian). Even though these companies tend to run into issues at scale on a daily basis, I still see value in modelling the business domain using actors since (with some haggling), they are quite descriptive of what actually happens in the real world.&lt;/p&gt;
&lt;p&gt;Please have a look at our documentation, go through the basic concepts, and the walkthroughs to get a good understanding of what akkatecture looks like. Akkatecture is intended for developers who understand cqrs / event sourcing. Knowledge of akka.net will give you more knowledge on how to extend Akkatecture through akka&apos;s highly extensible configuration.&lt;/p&gt;
&lt;h3 id=&quot;status-of-akkatecture&quot;&gt;&lt;a href=&quot;#status-of-akkatecture&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Status of Akkatecture&lt;/h3&gt;
&lt;p&gt;Akkatecture is still currently in development, however most of the basic building blocks have been built out, but as of yet no v1 to speak of on NuGet.&lt;/p&gt;
&lt;p&gt;The next plan is to work on the current core library and branch it out to support clustered deployment scenarios.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Your First Aggregate]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/your-first-aggregate</link><guid isPermaLink="false">https://akkatecture.github.io/your-first-aggregate</guid><category><![CDATA[walkthrough]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Your First Aggregate Saga]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/your-first-aggregate-saga</link><guid isPermaLink="false">https://akkatecture.github.io/your-first-aggregate-saga</guid><category><![CDATA[walkthrough]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Your First Read Model]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/your-first-read-model</link><guid isPermaLink="false">https://akkatecture.github.io/your-first-read-model</guid><category><![CDATA[walkthrough]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Your First Subscriber]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/your-first-subscriber</link><guid isPermaLink="false">https://akkatecture.github.io/your-first-subscriber</guid><category><![CDATA[walkthrough]]></category><category><![CDATA[akkatecture]]></category><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sat, 06 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Placeholder]]></title><description><![CDATA[TBD]]></description><link>https://akkatecture.github.io/placeholder</link><guid isPermaLink="false">https://akkatecture.github.io/placeholder</guid><pubDate>Fri, 05 Jan 2018 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TBD&lt;/p&gt;</content:encoded></item></channel></rss>