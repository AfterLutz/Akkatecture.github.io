webpackJsonp([91706354021182],{400:function(e,t){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Clustering",lesson:1,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/clustering"}}},{node:{frontmatter:{title:"Aggregates",lesson:3,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/aggregates"}}},{node:{frontmatter:{title:"Production Readiness",lesson:4,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/production-readiness"}}},{node:{frontmatter:{title:"Snapshotting",lesson:2,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/snapshotting"}}},{node:{frontmatter:{title:"Sagas",lesson:1,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/sagas"}}},{node:{frontmatter:{title:"Events",lesson:4,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/events"}}},{node:{frontmatter:{title:"Configuration",lesson:8,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/configuration"}}},{node:{frontmatter:{title:"Akka",lesson:6,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/akka"}}},{node:{frontmatter:{title:"Identity",lesson:1,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/identity"}}},{node:{frontmatter:{title:"Subscribers",lesson:7,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/subscribers"}}},{node:{frontmatter:{title:"Commands",lesson:5,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/commands"}}},{node:{frontmatter:{title:"Tips and Tricks",lesson:1,category:"akkatecture",chapter:5,type:"lesson"},fields:{slug:"/tips-and-tricks"}}},{node:{frontmatter:{title:"Your First Aggregate",lesson:1,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-aggregate"}}},{node:{frontmatter:{title:"Your First Aggregate Saga",lesson:4,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-aggregate-saga"}}},{node:{frontmatter:{title:"Your First Read Model",lesson:3,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-read-model"}}},{node:{frontmatter:{title:"Your First Subscriber",lesson:2,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-subscriber"}}},{node:{frontmatter:{title:"Getting Started",lesson:1,category:"akkatecture",chapter:1,type:"lesson"},fields:{slug:"/getting-started"}}},{node:{frontmatter:{title:"Articles",lesson:2,category:"akkatecture",chapter:5,type:"lesson"},fields:{slug:"/articles"}}},{node:{frontmatter:{title:"Video Content",lesson:3,category:"akkatecture",chapter:5,type:"lesson"},fields:{slug:"/video-content"}}}]},postBySlug:{html:'<p>The <code class="language-text">Identity&lt;&gt;</code> value object provides generic functionality to create\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\naround a <code class="language-text">Guid</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestId</span> <span class="token punctuation">:</span> <span class="token class-name">Identity</span><span class="token operator">&lt;</span>TestId<span class="token operator">></span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">TestId</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ol>\n<li>\n<p>The identity follow the form <code class="language-text">{class without &quot;Id&quot;}-{guid}</code> e.g. <code class="language-text">test-c93fdb8c-5c9a-4134-bbcd-87c0644ca34f</code> for the above <code class="language-text">TestId</code> example.</p>\n</li>\n<li>\n<p>The internal <code class="language-text">Guid</code> can be generated using one of the following methods/properties. Note that you can access the <code class="language-text">Guid</code> factories directly by accessing the static methods on the <code class="language-text">GuidFactories</code> class.</p>\n</li>\n<li>\n<p><code class="language-text">New</code>: Uses the standard <code class="language-text">Guid.NewGuid()</code>.</p>\n</li>\n<li>\n<p><code class="language-text">NewDeterministic(...)</code>: Creates a name-based <code class="language-text">Guid</code> using the algorithm from <a href="https://www.ietf.org/rfc/rfc4122.txt">RFC 4122 §4.3</a>, which allows identities to be generated based on known data, e.g. an user e-mail, i.e., it always returns the same identity for the same arguments.</p>\n</li>\n<li>\n<p><code class="language-text">NewComb()</code>: Creates a sequential <code class="language-text">Guid</code> that can be used to e.g. avoid database fragmentation.</p>\n</li>\n<li>\n<p>A <code class="language-text">string</code> can be tested to see if its a valid identity using the static <code class="language-text">bool IsValid(string)</code> method.</p>\n</li>\n<li>\n<p>Any validation errors can be gathered using the static <code class="language-text">IEnumerable&lt;string&gt; Validate(string)</code> method.</p>\n</li>\n</ol>\n<blockquote>\n<p>   Its very important to name the constructor argument <code class="language-text">value</code> as it is significant when the identity type is deserialized.</p>\n</blockquote>\n<p>Here\'s some examples on we can use our newly created <code class="language-text">TestId</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp">    <span class="token comment">// Uses the default Guid.NewGuid()</span>\n    <span class="token keyword">var</span> testId <span class="token operator">=</span> TestId<span class="token punctuation">.</span>New</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp">    <span class="token comment">// Create a namespace, put this in a constant somewhere</span>\n    <span class="token keyword">var</span> emailNamespace <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"769077C6-F84D-46E3-AD2E-828A576AAAF3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Creates an identity with the value "test-9181a444-af25-567e-a866-c263b6f6119a"</span>\n    <span class="token keyword">var</span> testId <span class="token operator">=</span> TestId<span class="token punctuation">.</span><span class="token function">NewDeterministic</span><span class="token punctuation">(</span>emailNamespace<span class="token punctuation">,</span> <span class="token string">"test@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp">    <span class="token comment">// Creates a new identity every time, but an identity when used in e.g.</span>\n    <span class="token comment">// database indexes, minimizes fragmentation</span>\n    <span class="token keyword">var</span> testId <span class="token operator">=</span> TestId<span class="token punctuation">.</span><span class="token function">NewComb</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<blockquote>\n<p>   Be sure to read the section about <code class="language-text">value objects &lt;value-objects&gt;</code> as the <code class="language-text">Identity&lt;&gt;</code> is basically a value object.</p>\n</blockquote>',timeToRead:2,excerpt:"The   value object provides generic functionality to create\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\naround a…",frontmatter:{title:"Identity",cover:"https://unsplash.it/400/300/?random?BoldMage",date:"01/07/2018",category:"akkatecture",tags:["basic-concepts","akkatecture","csharp","dotnet"]},fields:{slug:"/identity"}}},pathContext:{slug:"/identity",category:"akkatecture"}}}});
//# sourceMappingURL=path---lesson-akkatecture-identity-f297dbdab48311b9caaf.js.map