{"version":3,"sources":["webpack:///path---lesson-akkatecture-identity-bb2745dc09084b957a0d.js","webpack:///./.cache/json/lesson-akkatecture-identity.json"],"names":["webpackJsonp","413","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","category","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","cover","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,aAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAqFC,QAAWC,KAAA,kBAAyBR,MAAQC,aAAeC,MAAA,uBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,4BAAmCR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,QAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,aAAoBR,MAAQC,aAAeC,MAAA,aAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAqFC,QAAWC,KAAA,kBAAyBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,OAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAA+EC,QAAWC,KAAA,YAAmBR,MAAQC,aAAeC,MAAA,gBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAwFC,QAAWC,KAAA,qBAA4BR,MAAQC,aAAeC,MAAA,SAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAiFC,QAAWC,KAAA,cAAqBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAsFC,QAAWC,KAAA,mBAA0BR,MAAQC,aAAeC,MAAA,gBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAwFC,QAAWC,KAAA,qBAA4BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,uBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAA+FC,QAAWC,KAAA,4BAAmCR,MAAQC,aAAeC,MAAA,4BAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAoGC,QAAWC,KAAA,iCAAwCR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAgGC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAAgGC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,cAAAC,QAAA,EAAAC,KAAA,UAA0FC,QAAWC,KAAA,wBAA8BC,YAAeC,KAAA,+2KAA++KC,WAAA,EAAAC,QAAA,gJAAAX,aAAkPC,MAAA,WAAAW,MAAA,+CAAAC,KAAA,aAAAV,SAAA,cAAAW,MAAA,iDAA+KR,QAAWC,KAAA,eAAqBQ,aAAgBR,KAAA,YAAAJ,SAAA","file":"path---lesson-akkatecture-identity-bb2745dc09084b957a0d.js","sourcesContent":["webpackJsonp([91706354021182],{\n\n/***/ 413:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Clustering\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/clustering\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Production Readiness\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/production-readiness\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Sagas\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/sagas\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Aggregates\",\"lesson\":3,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/aggregates\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Commands\",\"lesson\":5,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/commands\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Akka\",\"lesson\":6,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/akka\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Configuration\",\"lesson\":8,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/configuration\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Events\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/events\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Identity\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/identity\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Subscribers\",\"lesson\":7,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/subscribers\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Video Content\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":5,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/video-content\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Articles\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":5,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/articles\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Aggregate\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-aggregate\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Aggregate Saga\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-aggregate-saga\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Read Model\",\"lesson\":3,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-read-model\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Subscriber\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-subscriber\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}}]},\"postBySlug\":{\"html\":\"<p>The <code class=\\\"language-text\\\">Identity&lt;&gt;</code> value object provides generic functionality to create\\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\\naround a <code class=\\\"language-text\\\">Guid</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestId</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Identity</span><span class=\\\"token operator\\\">&lt;</span>TestId<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">TestId</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> <span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>The identity follow the form <code class=\\\"language-text\\\">{class without &quot;Id&quot;}-{guid}</code> e.g.\\n<code class=\\\"language-text\\\">test-c93fdb8c-5c9a-4134-bbcd-87c0644ca34f</code> for the above\\n<code class=\\\"language-text\\\">TestId</code> example</li>\\n<li>The internal <code class=\\\"language-text\\\">Guid</code> can be generated using one of the following\\nmethods/properties. Note that you can access the <code class=\\\"language-text\\\">Guid</code> factories\\ndirectly by accessing the static methods on the <code class=\\\"language-text\\\">GuidFactories</code>\\nclass</li>\\n<li><code class=\\\"language-text\\\">New</code>: Uses the standard <code class=\\\"language-text\\\">Guid.NewGuid()</code></li>\\n<li><code class=\\\"language-text\\\">NewDeterministic(...)</code>: Creates a name-based <code class=\\\"language-text\\\">Guid</code> using the\\nalgorithm from <code class=\\\"language-text\\\">RFC 4122 &lt;https://www.ietf.org/rfc/rfc4122.txt&gt;</code>__\\nÂ§4.3, which allows identities to be generated based on known data,\\ne.g. an user e-mail, i.e., it always returns the same identity for\\nthe same arguments</li>\\n<li><code class=\\\"language-text\\\">NewComb()</code>: Creates a sequential <code class=\\\"language-text\\\">Guid</code> that can be used to e.g.\\navoid database fragmentation</li>\\n<li>A <code class=\\\"language-text\\\">string</code> can be tested to see if its a valid identity using the\\nstatic <code class=\\\"language-text\\\">bool IsValid(string)</code> method</li>\\n<li>Any validation errors can be gathered using the static\\n<code class=\\\"language-text\\\">IEnumerable&lt;string&gt; Validate(string)</code> method</li>\\n</ul>\\n<blockquote>\\n<p>   Its very important to name the constructor argument <code class=\\\"language-text\\\">value</code>\\nas it is significant when the identity type is deserialized.</p>\\n</blockquote>\\n<p>Here's some examples on we can use our newly created <code class=\\\"language-text\\\">TestId</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Uses the default Guid.NewGuid()</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span>New</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Create a namespace, put this in a constant somewhere</span>\\n    <span class=\\\"token keyword\\\">var</span> emailNamespace <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"769077C6-F84D-46E3-AD2E-828A576AAAF3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Creates an identity with the value \\\"test-9181a444-af25-567e-a866-c263b6f6119a\\\"</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewDeterministic</span><span class=\\\"token punctuation\\\">(</span>emailNamespace<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"test@example.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Creates a new identity every time, but an identity when used in e.g.</span>\\n    <span class=\\\"token comment\\\">// database indexes, minimizes fragmentation</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewComb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>   Be sure to read the section about\\n<code class=\\\"language-text\\\">value objects &lt;value-objects&gt;</code> as the <code class=\\\"language-text\\\">Identity&lt;&gt;</code> is basically a\\nvalue object.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"The   value object provides generic functionality to create\\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\\naround aâ¦\",\"frontmatter\":{\"title\":\"Identity\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"01/07/2018\",\"category\":\"akkatecture\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/identity\"}}},\"pathContext\":{\"slug\":\"/identity\",\"category\":\"akkatecture\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lesson-akkatecture-identity-bb2745dc09084b957a0d.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Clustering\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/clustering\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Production Readiness\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/production-readiness\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Sagas\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/sagas\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Aggregates\",\"lesson\":3,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/aggregates\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Commands\",\"lesson\":5,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/commands\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Akka\",\"lesson\":6,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/akka\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Configuration\",\"lesson\":8,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/configuration\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Events\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/events\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Identity\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/identity\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Subscribers\",\"lesson\":7,\"category\":\"akkatecture\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/subscribers\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Video Content\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":5,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/video-content\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Articles\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":5,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/articles\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Aggregate\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-aggregate\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Aggregate Saga\",\"lesson\":4,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-aggregate-saga\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Read Model\",\"lesson\":3,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-read-model\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Your First Subscriber\",\"lesson\":2,\"category\":\"akkatecture\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/your-first-subscriber\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":1,\"category\":\"akkatecture\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}}]},\"postBySlug\":{\"html\":\"<p>The <code class=\\\"language-text\\\">Identity&lt;&gt;</code> value object provides generic functionality to create\\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\\naround a <code class=\\\"language-text\\\">Guid</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestId</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Identity</span><span class=\\\"token operator\\\">&lt;</span>TestId<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">TestId</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">string</span> <span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">value</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>The identity follow the form <code class=\\\"language-text\\\">{class without &quot;Id&quot;}-{guid}</code> e.g.\\n<code class=\\\"language-text\\\">test-c93fdb8c-5c9a-4134-bbcd-87c0644ca34f</code> for the above\\n<code class=\\\"language-text\\\">TestId</code> example</li>\\n<li>The internal <code class=\\\"language-text\\\">Guid</code> can be generated using one of the following\\nmethods/properties. Note that you can access the <code class=\\\"language-text\\\">Guid</code> factories\\ndirectly by accessing the static methods on the <code class=\\\"language-text\\\">GuidFactories</code>\\nclass</li>\\n<li><code class=\\\"language-text\\\">New</code>: Uses the standard <code class=\\\"language-text\\\">Guid.NewGuid()</code></li>\\n<li><code class=\\\"language-text\\\">NewDeterministic(...)</code>: Creates a name-based <code class=\\\"language-text\\\">Guid</code> using the\\nalgorithm from <code class=\\\"language-text\\\">RFC 4122 &lt;https://www.ietf.org/rfc/rfc4122.txt&gt;</code>__\\nÂ§4.3, which allows identities to be generated based on known data,\\ne.g. an user e-mail, i.e., it always returns the same identity for\\nthe same arguments</li>\\n<li><code class=\\\"language-text\\\">NewComb()</code>: Creates a sequential <code class=\\\"language-text\\\">Guid</code> that can be used to e.g.\\navoid database fragmentation</li>\\n<li>A <code class=\\\"language-text\\\">string</code> can be tested to see if its a valid identity using the\\nstatic <code class=\\\"language-text\\\">bool IsValid(string)</code> method</li>\\n<li>Any validation errors can be gathered using the static\\n<code class=\\\"language-text\\\">IEnumerable&lt;string&gt; Validate(string)</code> method</li>\\n</ul>\\n<blockquote>\\n<p>   Its very important to name the constructor argument <code class=\\\"language-text\\\">value</code>\\nas it is significant when the identity type is deserialized.</p>\\n</blockquote>\\n<p>Here's some examples on we can use our newly created <code class=\\\"language-text\\\">TestId</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Uses the default Guid.NewGuid()</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span>New</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Create a namespace, put this in a constant somewhere</span>\\n    <span class=\\\"token keyword\\\">var</span> emailNamespace <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"769077C6-F84D-46E3-AD2E-828A576AAAF3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Creates an identity with the value \\\"test-9181a444-af25-567e-a866-c263b6f6119a\\\"</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewDeterministic</span><span class=\\\"token punctuation\\\">(</span>emailNamespace<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"test@example.com\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\">    <span class=\\\"token comment\\\">// Creates a new identity every time, but an identity when used in e.g.</span>\\n    <span class=\\\"token comment\\\">// database indexes, minimizes fragmentation</span>\\n    <span class=\\\"token keyword\\\">var</span> testId <span class=\\\"token operator\\\">=</span> TestId<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewComb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<blockquote>\\n<p>   Be sure to read the section about\\n<code class=\\\"language-text\\\">value objects &lt;value-objects&gt;</code> as the <code class=\\\"language-text\\\">Identity&lt;&gt;</code> is basically a\\nvalue object.</p>\\n</blockquote>\",\"timeToRead\":2,\"excerpt\":\"The   value object provides generic functionality to create\\nand validate the IDs of e.g. aggregate roots. Its basically a wrapper\\naround aâ¦\",\"frontmatter\":{\"title\":\"Identity\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"01/07/2018\",\"category\":\"akkatecture\",\"tags\":[\"getting-started\",\"nact\",\"javascript\",\"nodejs\"]},\"fields\":{\"slug\":\"/identity\"}}},\"pathContext\":{\"slug\":\"/identity\",\"category\":\"akkatecture\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lesson-akkatecture-identity.json\n// module id = 413\n// module chunks = 91706354021182"],"sourceRoot":""}