{"version":3,"sources":["webpack:///path---lesson-reasonml-persist-95e71d19a6ec9dca7a9f.js","webpack:///./.cache/json/lesson-reasonml-persist.json"],"names":["webpackJsonp","430","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","category","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","cover","date","tags","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,sBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA2FC,QAAWC,KAAA,2BAAkCR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAiFC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,yBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA8FC,QAAWC,KAAA,8BAAqCR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA+EC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,mBAA0BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,iBAAuBC,YAAeC,KAAA,+sPAAqvPC,WAAA,EAAAC,QAAA,gJAAAX,aAA6bC,MAAA,UAAAW,MAAA,+CAAAC,KAAA,aAAAV,SAAA,WAAAW,MAAA,mDAA6KR,QAAWC,KAAA,cAAoBQ,aAAgBR,KAAA,WAAAJ,SAAA","file":"path---lesson-reasonml-persist-95e71d19a6ec9dca7a9f.js","sourcesContent":["webpackJsonp([4636931421739],{\n\n/***/ 430:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Logging and Monitoring\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/logging-and-monitoring\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>The contacts service we've been working on <em>still</em> isn't very useful. While we've extended the service to support multiple users, it has the unfortunate limitation that it loses the contacts each time the program restarts. To remedy this, nact extends stateful actors by adding a new function: <code class=\\\"language-text\\\">persist</code> </p>\\n<p>To use <code class=\\\"language-text\\\">persist</code>, the first thing we need to do is specify a persistence engine. Currently only a <a href=\\\"https://github.com/ncthbrt/reason-nact-postgres\\\">PostgreSQL</a> engine is available (though it should be easy to create your own). To work with the PostgreSQL engine, install the persistent provider package using the command <code class=\\\"language-text\\\">npm install --save reason-nact-postgres</code>. Also ensure you add\\nthe package to <code class=\\\"language-text\\\">bsconfig.json</code>. Now we'll need to modify the code creating the system to look something like the following (replacing \\\"CONNECTION_STRING\\\" with a valid postgresql connection string of course):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">~</span>persistenceEngine<span class=\\\"token operator\\\">=</span><span class=\\\"token class-name\\\">NactPostgres</span><span class=\\\"token punctuation\\\">.</span>create<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"CONNECTION_STRING\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The optional parameter <code class=\\\"language-text\\\">~persistenceEngine</code> adds the persistence plugin to the system using the specified persistence engine.</p>\\n<p>Now the only remaining work is to modify the contacts service to allow persistence. When the actor start up, it first receives all the persisted messages and then can begin processing new ones. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">let</span> createContactsService <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  spawnPersistent<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>key<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"contacts\\\"</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">+</span> userId<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span>userId<span class=\\\"token punctuation\\\">,</span>\\n    parent<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>persist<span class=\\\"token punctuation\\\">,</span> recovering<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token punctuation\\\">(</span>recovering <span class=\\\"token operator\\\">?</span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> persist<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>then_ <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n          <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">switch</span> msg <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">CreateContact</span><span class=\\\"token punctuation\\\">(</span>contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> createContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">RemoveContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> removeContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">UpdateContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> updateContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">FindContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> findContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>contacts<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ContactIdMap</span><span class=\\\"token punctuation\\\">.</span>empty<span class=\\\"token punctuation\\\">,</span> seqNumber<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The <code class=\\\"language-text\\\">~key</code> parameter supplied when spawning the persistent actor is very important and should be a unique value. The key is used to save and retrieve snapshots and persisted events.</p>\",\"timeToRead\":1,\"excerpt\":\"The contacts service we've been working on  still  isn't very useful. While we've extended the service to support multiple users, it has the…\",\"frontmatter\":{\"title\":\"Persist\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/persist\"}}},\"pathContext\":{\"slug\":\"/persist\",\"category\":\"reasonml\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lesson-reasonml-persist-95e71d19a6ec9dca7a9f.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Logging and Monitoring\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/logging-and-monitoring\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}}]},\"postBySlug\":{\"html\":\"<p>The contacts service we've been working on <em>still</em> isn't very useful. While we've extended the service to support multiple users, it has the unfortunate limitation that it loses the contacts each time the program restarts. To remedy this, nact extends stateful actors by adding a new function: <code class=\\\"language-text\\\">persist</code> </p>\\n<p>To use <code class=\\\"language-text\\\">persist</code>, the first thing we need to do is specify a persistence engine. Currently only a <a href=\\\"https://github.com/ncthbrt/reason-nact-postgres\\\">PostgreSQL</a> engine is available (though it should be easy to create your own). To work with the PostgreSQL engine, install the persistent provider package using the command <code class=\\\"language-text\\\">npm install --save reason-nact-postgres</code>. Also ensure you add\\nthe package to <code class=\\\"language-text\\\">bsconfig.json</code>. Now we'll need to modify the code creating the system to look something like the following (replacing \\\"CONNECTION_STRING\\\" with a valid postgresql connection string of course):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">~</span>persistenceEngine<span class=\\\"token operator\\\">=</span><span class=\\\"token class-name\\\">NactPostgres</span><span class=\\\"token punctuation\\\">.</span>create<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"CONNECTION_STRING\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The optional parameter <code class=\\\"language-text\\\">~persistenceEngine</code> adds the persistence plugin to the system using the specified persistence engine.</p>\\n<p>Now the only remaining work is to modify the contacts service to allow persistence. When the actor start up, it first receives all the persisted messages and then can begin processing new ones. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">let</span> createContactsService <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> userId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  spawnPersistent<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>key<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"contacts\\\"</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">+</span> userId<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span>userId<span class=\\\"token punctuation\\\">,</span>\\n    parent<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>persist<span class=\\\"token punctuation\\\">,</span> recovering<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token punctuation\\\">(</span>recovering <span class=\\\"token operator\\\">?</span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> persist<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>then_ <span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n          <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">switch</span> msg <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">CreateContact</span><span class=\\\"token punctuation\\\">(</span>contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> createContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">RemoveContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> removeContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">UpdateContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> updateContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">,</span> contact<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">FindContact</span><span class=\\\"token punctuation\\\">(</span>contactId<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> findContact<span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> sender<span class=\\\"token punctuation\\\">,</span> contactId<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>contacts<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">ContactIdMap</span><span class=\\\"token punctuation\\\">.</span>empty<span class=\\\"token punctuation\\\">,</span> seqNumber<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>The <code class=\\\"language-text\\\">~key</code> parameter supplied when spawning the persistent actor is very important and should be a unique value. The key is used to save and retrieve snapshots and persisted events.</p>\",\"timeToRead\":1,\"excerpt\":\"The contacts service we've been working on  still  isn't very useful. While we've extended the service to support multiple users, it has the…\",\"frontmatter\":{\"title\":\"Persist\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/persist\"}}},\"pathContext\":{\"slug\":\"/persist\",\"category\":\"reasonml\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lesson-reasonml-persist.json\n// module id = 430\n// module chunks = 4636931421739"],"sourceRoot":""}