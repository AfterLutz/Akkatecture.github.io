webpackJsonp([0xfec7e2df1f54],{420:function(n,s){n.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Clustering",lesson:1,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/clustering"}}},{node:{frontmatter:{title:"Production Readiness",lesson:4,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/production-readiness"}}},{node:{frontmatter:{title:"Snapshotting",lesson:2,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/snapshotting"}}},{node:{frontmatter:{title:"Sagas",lesson:1,category:"akkatecture",chapter:4,type:"lesson"},fields:{slug:"/sagas"}}},{node:{frontmatter:{title:"Aggregates",lesson:3,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/aggregates"}}},{node:{frontmatter:{title:"Commands",lesson:5,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/commands"}}},{node:{frontmatter:{title:"Akka",lesson:6,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/akka"}}},{node:{frontmatter:{title:"Configuration",lesson:8,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/configuration"}}},{node:{frontmatter:{title:"Events",lesson:4,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/events"}}},{node:{frontmatter:{title:"Identity",lesson:1,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/identity"}}},{node:{frontmatter:{title:"Subscribers",lesson:7,category:"akkatecture",chapter:2,type:"lesson"},fields:{slug:"/subscribers"}}},{node:{frontmatter:{title:"Video Content",lesson:2,category:"akkatecture",chapter:5,type:"lesson"},fields:{slug:"/video-content"}}},{node:{frontmatter:{title:"Articles",lesson:1,category:"akkatecture",chapter:5,type:"lesson"},fields:{slug:"/articles"}}},{node:{frontmatter:{title:"Your First Aggregate",lesson:1,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-aggregate"}}},{node:{frontmatter:{title:"Your First Aggregate Saga",lesson:4,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-aggregate-saga"}}},{node:{frontmatter:{title:"Your First Read Model",lesson:3,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-read-model"}}},{node:{frontmatter:{title:"Your First Subscriber",lesson:2,category:"akkatecture",chapter:3,type:"lesson"},fields:{slug:"/your-first-subscriber"}}},{node:{frontmatter:{title:"Getting Started",lesson:1,category:"akkatecture",chapter:1,type:"lesson"},fields:{slug:"/getting-started"}}}]},postBySlug:{html:'<!-- <a class="remix-button" href="https://glitch.com/edit/#!/remix/nact-contacts-3" target="_blank">\n  <button>\n    <img src="/img/code-fork-symbol.svg"/> REMIX\n  </button>\n</a> -->\n<p>The contacts service we\'ve been working on <em>still</em> isn\'t very useful. While we\'ve extended the service to support multiple users, it has the unfortunate limitation that it loses the contacts each time the machine restarts. To remedy this, nact extends stateful actors by adding a new method: <code class="language-text">persist</code> </p>\n<p>To use <code class="language-text">persist</code>, the first thing we need to do is specify a persistence engine. Currently only a <a href="https://github.com/ncthbrt/nact-persistence-postgres">PostgreSQL</a> engine is available (though it should be easy to create your own). To work with the PostgreSQL engine, install the persistent provider package using the command <code class="language-text">npm install --save nact-persistence-postgres</code>.  Assuming you\'ve stored a connection string to a running database instance under the environment variable <code class="language-text">DATABASE_URL</code> , we\'ll need to modify the code creating the system to look something like the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> start<span class="token punctuation">,</span> configurePersistence<span class="token punctuation">,</span> spawnPersistent <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'nact\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> PostgresPersistenceEngine <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'nact-persistence-postgres\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> connectionString <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> system <span class="token operator">=</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token function">configurePersistence</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PostgresPersistenceEngine</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The <code class="language-text">configurePersistence</code> method adds the the persistence plugin to the system using the specified persistence engine.</p>\n<p>Now the only remaining work is to modify the contacts service to allow persistence. We want to save messages which modify state and replay them when the actor starts up again. When the actor start up, it first receives all the persisted messages and then can begin processing new ones. </p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">spawnUserContactService</span> <span class="token operator">=</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">spawnPersistent</span><span class="token punctuation">(</span>\n  parent<span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> contacts<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>    \n    <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">GET_CONTACTS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        \n      \t<span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>contacts<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token constant">SUCCESS</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">CREATE_CONTACT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> newContact <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>msg<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token punctuation">{</span> contacts<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>contacts<span class="token punctuation">,</span> <span class="token punctuation">[</span>newContact<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">:</span> newContact <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      \t\n      \t<span class="token comment">// We only want to save messages which haven\'t been previously persisted </span>\n      \t<span class="token comment">// Note the persist call should always be awaited. If persist is not awaited, </span>\n      \t<span class="token comment">// then the actor will process the next message in the queue before the </span>\n      \t<span class="token comment">// message has been safely committed. </span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>recovering<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n      \t\n      \t<span class="token comment">// Safe to dispatch while recovering. </span>\n      \t<span class="token comment">// The message just goes to Nobody and is ignored.      </span>\n        <span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">SUCCESS</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> newContact <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n        <span class="token keyword">return</span> nextState<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> contact <span class="token operator">=</span> state<span class="token punctuation">.</span>contacts<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>contactId<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>contact<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">switch</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">case</span> <span class="token constant">GET_CONTACT</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                <span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload<span class="token punctuation">:</span> contact<span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token constant">SUCCESS</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n              <span class="token keyword">case</span> <span class="token constant">REMOVE_CONTACT</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>contacts<span class="token punctuation">,</span> <span class="token punctuation">[</span>contact<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">:</span> undefined <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>recovering<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n                <span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">SUCCESS</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> contact <span class="token punctuation">}</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>                  \n                <span class="token keyword">return</span> nextState<span class="token punctuation">;</span>                 \n              <span class="token punctuation">}</span>\n              <span class="token keyword">case</span> <span class="token constant">UPDATE_CONTACT</span><span class="token punctuation">:</span>  <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> updatedContact <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>contact<span class="token punctuation">,</span> <span class="token operator">...</span>msg<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>contacts<span class="token punctuation">,</span> <span class="token punctuation">[</span>contact<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">:</span> updatedContact <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>recovering<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                \n                <span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">SUCCESS</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> updatedContact <span class="token punctuation">}</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>                \n                <span class="token keyword">return</span> nextState<span class="token punctuation">;</span>                 \n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          \n          <span class="token function">dispatch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">NOT_FOUND</span><span class="token punctuation">,</span> contactId<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>contactId <span class="token punctuation">}</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// Persistence key. If we want to restore actor state,</span>\n  <span class="token comment">// the key must be the same. Be careful about namespacing here. </span>\n  <span class="token comment">// For example if we\'d just used userId, another developer might accidentally</span>\n  <span class="token comment">// use the same key for an actor of a different type. This could cause difficult to </span>\n  <span class="token comment">// debug runtime errors</span>\n  <span class="token template-string"><span class="token string">`contacts:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n  userId\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>',timeToRead:2,excerpt:"The contacts service we've been working on  still  isn't very useful. While we've extended the service to support multiple users, it has the…",frontmatter:{title:"Your First Aggregate",cover:"https://unsplash.it/400/300/?random?BoldMage",date:"01/07/2018",category:"akkatecture",tags:["getting-started","nact","javascript","nodejs"]},fields:{slug:"/your-first-aggregate"}}},pathContext:{slug:"/your-first-aggregate",category:"akkatecture"}}}});
//# sourceMappingURL=path---lesson-akkatecture-your-first-aggregate-aa0b335efb1ae701a7f1.js.map