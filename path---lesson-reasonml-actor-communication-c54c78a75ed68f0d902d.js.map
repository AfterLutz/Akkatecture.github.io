{"version":3,"sources":["webpack:///path---lesson-reasonml-actor-communication-c54c78a75ed68f0d902d.js","webpack:///./.cache/json/lesson-reasonml-actor-communication.json"],"names":["webpackJsonp","425","module","exports","data","allPostTitles","edges","node","frontmatter","title","lesson","category","chapter","type","fields","slug","postBySlug","html","timeToRead","excerpt","cover","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,QAAUC,MAAQC,aAAeC,MAAA,sBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA2FC,QAAWC,KAAA,2BAAkCR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,wBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA6FC,QAAWC,KAAA,6BAAoCR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,yBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA8FC,QAAWC,KAAA,8BAAqCR,MAAQC,aAAeC,MAAA,UAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAA+EC,QAAWC,KAAA,eAAsBR,MAAQC,aAAeC,MAAA,YAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAiFC,QAAWC,KAAA,iBAAwBR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,eAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAoFC,QAAWC,KAAA,oBAA2BR,MAAQC,aAAeC,MAAA,kBAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAuFC,QAAWC,KAAA,uBAA8BR,MAAQC,aAAeC,MAAA,WAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAgFC,QAAWC,KAAA,gBAAuBR,MAAQC,aAAeC,MAAA,cAAAC,OAAA,EAAAC,SAAA,WAAAC,QAAA,EAAAC,KAAA,UAAmFC,QAAWC,KAAA,oBAA0BC,YAAeC,KAAA,6uLAA6uLC,WAAA,EAAAC,QAAA,+IAAyUX,aAA8GC,MAAA,sBAAAW,MAAA,+CAAAC,KAAA,aAAAV,SAAA,WAAAW,MAAA,mDAAyLR,QAAWC,KAAA,0BAAgCQ,aAAgBR,KAAA,uBAAAJ,SAAA","file":"path---lesson-reasonml-actor-communication-c54c78a75ed68f0d902d.js","sourcesContent":["webpackJsonp([168254311109196],{\n\n/***/ 425:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Logging and Monitoring\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/logging-and-monitoring\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}}]},\"postBySlug\":{\"html\":\"<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code class=\\\"language-text\\\">dispatch</code> method. </p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to ping and\\nspecify that the sender in msgType is pong.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> msgType <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> ping<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"ping\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      dispatch<span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> pong<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"pong\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">/* Here we're using the &lt;-&lt; operator as a shorthand for the dispatch method */</span>\\n      sender <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nping <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>pong<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">begin\\nping\\npong\\nping\\npong\\nping\\n...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the   method…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"category\":\"reasonml\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lesson-reasonml-actor-communication-c54c78a75ed68f0d902d.js","module.exports = {\"data\":{\"allPostTitles\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"Actor Communication\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/actor-communication\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Getting Started\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/getting-started\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Decoders and Encoders\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/decoders-and-encoders\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Adapters\",\"lesson\":6,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/adapters\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Introduction\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":1,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/introduction\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Logging and Monitoring\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":4,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/logging-and-monitoring\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Persist\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/persist\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Hierarchy\",\"lesson\":4,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/hierarchy\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Querying\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/querying\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Snapshotting\",\"lesson\":2,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/snapshotting\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Stateful Actors\",\"lesson\":1,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/stateful-actors\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Timeouts\",\"lesson\":3,\"category\":\"reasonml\",\"chapter\":3,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/timeouts\"}}},{\"node\":{\"frontmatter\":{\"title\":\"Supervision\",\"lesson\":5,\"category\":\"reasonml\",\"chapter\":2,\"type\":\"lesson\"},\"fields\":{\"slug\":\"/supervision\"}}}]},\"postBySlug\":{\"html\":\"<p>An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the <code class=\\\"language-text\\\">dispatch</code> method. </p>\\n<p>In this example, the actors Ping and Pong are playing a perfect ping-pong match. To start the match, we dispatch a message to ping and\\nspecify that the sender in msgType is pong.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-reason\\\"><code class=\\\"language-reason\\\"><span class=\\\"token keyword\\\">open</span> <span class=\\\"token constructor variable\\\">Nact</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">open</span> <span class=\\\"token class-name\\\">Nact</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constructor variable\\\">Operators</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> system <span class=\\\"token operator\\\">=</span> start<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">type</span> msgType <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token operator\\\">|</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> ping<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"ping\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      dispatch<span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> pong<span class=\\\"token punctuation\\\">:</span> actorRef<span class=\\\"token punctuation\\\">(</span>msgType<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\n  spawnStateless<span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">~</span>name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"pong\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    system<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">(</span><span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>sender<span class=\\\"token punctuation\\\">,</span> msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      print_endline<span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token comment\\\">/* Here we're using the &lt;-&lt; operator as a shorthand for the dispatch method */</span>\\n      sender <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>ctx<span class=\\\"token punctuation\\\">.</span>self<span class=\\\"token punctuation\\\">,</span> ctx<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span><span class=\\\"token operator\\\">></span> <span class=\\\"token class-name\\\">Js</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">.</span>resolve\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nping <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token constructor variable\\\">Msg</span><span class=\\\"token punctuation\\\">(</span>pong<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>This produces the following console output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">begin\\nping\\npong\\nping\\npong\\nping\\n...</code></pre>\\n      </div>\",\"timeToRead\":1,\"excerpt\":\"An actor alone is a somewhat useless construct; actors need to work together. Actors can send messages to one another by using the   method…\",\"frontmatter\":{\"title\":\"Actor Communication\",\"cover\":\"https://unsplash.it/400/300/?random?BoldMage\",\"date\":\"11/12/2017\",\"category\":\"reasonml\",\"tags\":[\"getting-started\",\"nact\",\"reason\",\"bucklescript\"]},\"fields\":{\"slug\":\"/actor-communication\"}}},\"pathContext\":{\"slug\":\"/actor-communication\",\"category\":\"reasonml\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lesson-reasonml-actor-communication.json\n// module id = 425\n// module chunks = 168254311109196"],"sourceRoot":""}